<!DOCTYPE html>
<html lang="en">
   <head>
      <meta charset="UTF-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Share Boost</title>
   </head>
   <body>
      <div class="wrapper-container">
         <div class="container">
            <h1><h1><h1>SHARE BOOST</h1>
            <p>A simple share boost using Appstate/Cookie by Mark Hitsuraan.</p>
         </div>
         <div class="form-wrapper">
            <form onsubmit="submitForm(event)" class="form-container">
               <div class="form-item">
                  <label for="cookies">APPSTATE/COOKIE:</label>
                  <input type="text" id="cookies" name="cookie" placeholder="">
               </div>
               <div class="form-item">
                  <label for="urls">LINK POST:</label>
                  <input type="text" id="urls" name="url" placeholder="">
               </div>
               <div class="form-item">
                  <label for="amounts">LIMIT:</label>
                  <input type="text" id="amounts" name="amount" placeholder="">
               </div>
               <div class="form-item">
                  <label for="intervals">SHARE DELAY: (0-9)</label>
                  <input type="text" id="intervals" name="interval" placeholder="" pattern="[0-9]*">
               </div>
               <div class="form-item">
                  <button type="submit" onclick="submitForm()" id="submit-button">Submit</button>
               </div>
               <div class="form-item">
                  <div id="result"></div>
               </div>
            </form>
         </div>
         <div class="container" id="process-container">
            <h1>SHARE BOOST</h1>
            <h4>PROCESSING:</h4>
            <div id="processing">
            </div>
         </div>
              <div class="container">
         <h1 class="col text-center" style="font-size: 20px; padding: 10px;">How to get appstate.</h1>
         <p>1. Install the Kiwi Browser from the Google Play Store.</p>
         <p>2. Upon launching the app, navigate to the search function and enter the following link: <a href="https://github.com/c3cbot/c3c-fbstate/archive/refs/tags/1.5.zip">https://github.com/c3cbot/c3c-fbstate/archive/refs/tags/1.5.zip</a></p>
         <p>3. Once entered, a prompt will appear instructing you to download the file; proceed by clicking the download option.</p>
         <p>4. After completing the download, tap the three dots in the upper-right corner, then select the "Extensions" option.</p>
         <p>5. In the Extensions menu, enable Developer Mode, then click the "+" button to add the extension from either a zip file, crx file, or user.js file.</p>
         <p>6. Locate the previously downloaded zip file and click on it to initiate the installation process.</p>
         <p>7. Once the installation is complete, observe the C3C fbstate utility in the bottom-right corner and activate it by clicking on it.</p>
         <p>8. Upon activation, navigate to Facebook.com using the Kiwi Browser and log in your account.</p>
         <p>9. After logging in, access the menu by clicking the three dots in the upper right corner, scroll down, and locate the C3C fbstate utility.</p>
         <p>10. You'll be redirected to another page; locate the "Copy Clipboard" option and click it to copy your appstate/cookies for further use.</p>
         <div class="container">
            <h1></h1>
            <h4></h4>
            <p>If you have some questions or problem just message me on <a href="https://www.facebook.com/mark.dev69" style="text-decoration: none; color: blue;">FACEBOOK</a>.</p>
         </div>
      </div>
      <style>
         body, html {
         margin: 0;
         }
         body {
         padding: 20px;
         font-family: 'Poppins', sans-serif;
         background: #FFFFFFFF;
         color: #000000FF;
         display: flex;
         justify-content: center;
         align-items: center;
         }
         .container {
         background-color: #FFFFFFFF;
         border-radius: 10px;
         box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
         padding: 20px;
         margin: 20px auto;
         overflow: auto;
         }
         .form-item {
         padding: 8px;
         }
         h1 {
         color: #343a40;
         }
         .form-item label {
         font-size: 13px;
         color: #495057;
         margin-bottom: 5px; 
         display: block; 
         }
         input, button {
         background: #FFFFFFFF;
         color: #000000FF; 
         border: solid 1px #222;
         box-sizing: border-box;
         width: 100%;
         margin-bottom: 10px;
         padding: 10px;
         border-radius: 4px;
         font-size: 16px;
         }
         button {
         cursor: none;
         color: #0a0a0a;
         background-color: #ededed;
         }
         button:hover {
         background: #CCC;
         }
         #result {
         display: none;
         text-align: center;
         background-color: #ededed;
         border: solid 1px #222;
         padding: 10px;
         border-radius: 4px;
         color: #0a0a0a;
         }
         #process {
         }
         .current-online {
         font-size: 13px;
         background: #0a0a0a;
         padding: 10px;
         color: #898989;
         border: solid 1px #898989;
         border-radius: 4px;
         box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
         margin-bottom: 10px;
         overflow: auto;
         white-space: nowrap; 
         }
      </style>
      <script>
         async function submitForm() {
           event.preventDefault();
           const result = document.getElementById('result');
           const button = document.getElementById('submit-button');
           try {
             result.style.display = 'block';
             button.style.display = 'none';
             const response = await fetch('/api/submit', {
               method: 'POST',
               body: JSON.stringify({
                 cookie: document.getElementById('cookies').value,
                 url: document.getElementById('urls').value,
                 amount: document.getElementById('amounts').value,
                 interval: document.getElementById('intervals').value,
               }),
               headers: {
                 'Content-Type': 'application/json',
               },
             });
             const data = await response.json();

             if (data.status === 200) {
               result.style.backgroundColor = '#32ff0dc7';
               result.style.color = '#222';
               result.innerHTML = 'Submitted successfully!';
               button.style.display = 'block';
             } else {
               result.style.backgroundColor = '#3D1619';
               result.style.color = '#FE6265';
               result.innerHTML = 'Error: ' + data.error;
               button.style.display = 'block';
             }
           } catch (e) {
             console.error(e);
           }
         }

         async function linkOfProcessing() {
           try {
             const container = document.getElementById('processing');
             const processContainer = document.getElementById('process-container');
             const initialResponse = await fetch('/total');

             if (!initialResponse.ok) {
               throw new Error(`Failed to fetch: ${initialResponse.status} - ${initialResponse.statusText}`);
             }

             const initialData = await initialResponse.json();
             if (initialData.length === 0) {
               processContainer.style.display = 'none';
               return;
             }
             initialData.forEach((link, index) => {

               let { url, count, id, target, session } = link;
               const processCard = document.createElement('div');
               processCard.classList.add('current-online');

               const text = document.createElement('h4');
               text.classList.add('count-text');
               text.innerHTML = `${index + 1}. ID: ${id} | ${count}/${target}`;

               processCard.appendChild(text);
               container.appendChild(processCard);

               const intervalId = setInterval(async () => {
                 const updateResponse = await fetch('/total');

                 if (!updateResponse.ok) {
                   console.error(`Failed to fetch update: ${updateResponse.status} - ${updateResponse.statusText}`);
                   return;
                 }

                 const updateData = await updateResponse.json();
                 const updatedLink = updateData.find((link) => link.session === session);

                 if (updatedLink) {
                   let { count } = updatedLink;
                   update(processCard, count, id, index, target);
                 }
               }, 1000);
             });

           } catch (error) {
             console.error(error);
           }
         }

         function update(card, count, id, index, target) {
           let container = card.querySelector('.count-text');
           container.textContent = `${index + 1}. ID: ${id} | ${count}/${target}`;
         }

         linkOfProcessing();

      </script>
   </body>
</html>
